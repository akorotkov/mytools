Installing MySQL system tables...[Note] Global variable initial value (from config file) @@default-tmp-storage-engine = 'MyISAM'
[Note] Global variable initial value (from config file) @@query_cache_size = 0
[Note] Global variable initial value (from config file) @@long_query_time = 5.000000
[Note] Global variable initial value (from config file) @@log-bin = '/data/m/fbmy/binlogs/bl'
[Note] Global variable initial value (from config file) @@max_binlog_size = 134217728
[Note] Global variable initial value (from config file) @@server_id = 77
[Note] Global variable initial value (from config file) @@datadir = '/data/m/fbmy/data'
[Note] Global variable initial value (from config file) @@default-storage-engine = 'rocksdb'
[Note] Global variable initial value (from config file) @@binlog_format = 'ROW'
[Note] Global variable initial value (from config file) @@collation-server = 'latin1_bin'
[Note] Global variable initial value (from config file) @@transaction-isolation = 'READ-COMMITTED'
[Note] Global variable initial value (from cmd line) @@basedir = '.'
[Note] Global variable initial value (from cmd line) @@log_warnings = 0
[Note] Global variable initial value (from cmd line) @@max_allowed_packet = 8388608
2020-12-13 10:14:40 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).
2020-12-13 10:14:40 0 [Note] Ignoring --secure-file-priv value as server is running with --bootstrap.
2020-12-13 10:14:40 0 [Note] Setting num_sharded_locks=1 as sharding is OFF
2020-12-13 10:14:40 0 [Note] ./bin/mysqld (mysqld 5.6.35-log) starting as process 156300 ...
2020-12-13 10:14:40 156300 [Note] Flashcache bypass: disabled
2020-12-13 10:14:40 156300 [Note] Flashcache setup error is : open flash device failed

2020-12-13 10:14:40 156300 [Warning] The option innodb (skip-innodb) is deprecated and will be removed in a future release
2020-12-13 10:14:40 156300 [Note] RocksDB: Got ENOENT when listing column families
2020-12-13 10:14:40 156300 [Note] RocksDB:   assuming that we're creating a new database
2020-12-13 10:14:40 156300 [Note] RocksDB: Column Families at start:
2020-12-13 10:14:40 156300 [Note]   cf=default
2020-12-13 10:14:40 156300 [Note]     write_buffer_size=33554432
2020-12-13 10:14:40 156300 [Note]     target_file_size_base=33554432
2020-12-13 10:14:40 156300 [Note] RocksDB: Opening TransactionDB...
2020-12-13 10:14:40 156300 [Note] RocksDB: Initializing data dictionary...
2020-12-13 10:14:40 156300 [Note] RocksDB: creating a column family __system__
2020-12-13 10:14:40 156300 [Note]     write_buffer_size=33554432
2020-12-13 10:14:40 156300 [Note]     target_file_size_base=33554432
2020-12-13 10:14:40 156300 [Note] RocksDB: Initializing binlog manager...
2020-12-13 10:14:40 156300 [Note] RocksDB: Initializing DDL Manager...
2020-12-13 10:14:40 156300 [Note] RocksDB: Table_store: loaded DDL data for 0 tables
2020-12-13 10:14:40 156300 [Note] RocksDB: global statistics using get_sched_indexer_t indexer
2020-12-13 10:14:40 156300 [Note] MyRocks storage engine plugin has been successfully initialized.
2020-12-13 10:14:40 156300 [Note] MyRocks: rdb execution report (microsec): 
{
  "Rdb_ddl_manager::init" : 187
  "Rdb_binlog_manager::init" : 0
  "Rdb_dict_manager::init" : 19015
}
2020-12-13 10:14:40 156300 [Note] [rpl_wait_for_semi_sync_ack] Last ACKed pos initialized to: :4294967295
2020-12-13 10:14:40 156300 [Note] RSA private key file not found: /data/m/fbmy/data//private_key.pem. Some authentication plugins will not work.
2020-12-13 10:14:40 156300 [Note] RSA public key file not found: /data/m/fbmy/data//public_key.pem. Some authentication plugins will not work.
2020-12-13 10:14:40 156300 [ERROR] Can't open the mysql.native_proc table. Please run mysql_upgrade to create it.
2020-12-13 10:14:40 156300 [Note] query: use mysql;
2020-12-13 10:14:40 156300 [Note] query: set @default_engine=(SELECT engine FROM information_schema.engines WHERE Support='DEFAULT');
2020-12-13 10:14:40 156300 [Note] query: set sql_mode='';
2020-12-13 10:14:40 156300 [Note] query: set storage_engine=myisam;
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS db (   Host char(60) binary DEFAULT '' NOT NULL, Db char(64) binary DEFAULT '' NOT NULL, User char(80) binary DEFAULT '' NOT NULL, Select_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Insert_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Update_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Delete_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Create_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Drop_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Grant_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, References_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Index_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Alter_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Create_tmp_table_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Lock_tables_priv enum('N','Y') COLLATE utf8_general_ci DE
2020-12-13 10:14:40 156300 [Note] query: set @had_db_table= @@warning_count != 0;
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS user (   Host char(60) binary DEFAULT '' NOT NULL, User char(80) binary DEFAULT '' NOT NULL, Password char(41) character set latin1 collate latin1_bin DEFAULT '' NOT NULL, Select_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Insert_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Update_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Delete_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Create_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Drop_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Reload_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Shutdown_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Process_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, File_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, Grant_priv enum('N','Y') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, References_priv enum('N','Y
2020-12-13 10:14:40 156300 [Note] query: set @had_user_table= @@warning_count != 0;
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS func (  name char(64) binary DEFAULT '' NOT NULL, ret tinyint(1) DEFAULT '0' NOT NULL, dl char(128) DEFAULT '' NOT NULL, type enum ('function','aggregate') COLLATE utf8_general_ci NOT NULL, PRIMARY KEY (name) ) engine=MyISAM CHARACTER SET utf8 COLLATE utf8_bin   comment='User defined functions';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS native_proc (  name char(64) binary DEFAULT '' NOT NULL, type enum ('native','lua') COLLATE utf8_general_ci NOT NULL, dl char(128) DEFAULT '' NOT NULL, lua LONGTEXT NOT NULL, PRIMARY KEY (name) ) engine=MyISAM CHARACTER SET utf8 COLLATE utf8_bin comment='Native procedures';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS plugin ( name varchar(64) DEFAULT '' NOT NULL, dl varchar(128) DEFAULT '' NOT NULL, PRIMARY KEY (name) ) engine=MyISAM CHARACTER SET utf8 COLLATE utf8_general_ci comment='MySQL plugins';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS servers ( Server_name char(64) NOT NULL DEFAULT '', Host char(64) NOT NULL DEFAULT '', Db char(64) NOT NULL DEFAULT '', Username char(64) NOT NULL DEFAULT '', Password char(64) NOT NULL DEFAULT '', Port INT(4) NOT NULL DEFAULT '0', Socket char(64) NOT NULL DEFAULT '', Wrapper char(64) NOT NULL DEFAULT '', Owner char(64) NOT NULL DEFAULT '', PRIMARY KEY (Server_name)) CHARACTER SET utf8 comment='MySQL Foreign Servers table';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS tables_priv ( Host char(60) binary DEFAULT '' NOT NULL, Db char(64) binary DEFAULT '' NOT NULL, User char(80) binary DEFAULT '' NOT NULL, Table_name char(64) binary DEFAULT '' NOT NULL, Grantor char(77) DEFAULT '' NOT NULL, Timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, Table_priv set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger') COLLATE utf8_general_ci DEFAULT '' NOT NULL, Column_priv set('Select','Insert','Update','References') COLLATE utf8_general_ci DEFAULT '' NOT NULL, PRIMARY KEY (Host,Db,User,Table_name), KEY Grantor (Grantor) ) engine=MyISAM CHARACTER SET utf8 COLLATE utf8_bin   comment='Table privileges';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS columns_priv ( Host char(60) binary DEFAULT '' NOT NULL, Db char(64) binary DEFAULT '' NOT NULL, User char(80) binary DEFAULT '' NOT NULL, Table_name char(64) binary DEFAULT '' NOT NULL, Column_name char(64) binary DEFAULT '' NOT NULL, Timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, Column_priv set('Select','Insert','Update','References') COLLATE utf8_general_ci DEFAULT '' NOT NULL, PRIMARY KEY (Host,Db,User,Table_name,Column_name) ) engine=MyISAM CHARACTER SET utf8 COLLATE utf8_bin   comment='Column privileges';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS help_topic ( help_topic_id int unsigned not null, name char(64) not null, help_category_id smallint unsigned not null, description text not null, example text not null, url text not null, primary key (help_topic_id), unique index (name) ) engine=MyISAM CHARACTER SET utf8 comment='help topics';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS help_category ( help_category_id smallint unsigned not null, name  char(64) not null, parent_category_id smallint unsigned null, url text not null, primary key (help_category_id), unique index (name) ) engine=MyISAM CHARACTER SET utf8 comment='help categories';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS help_relation ( help_topic_id int unsigned not null references help_topic, help_keyword_id  int unsigned not null references help_keyword, primary key (help_keyword_id, help_topic_id) ) engine=MyISAM CHARACTER SET utf8 comment='keyword-topic relation';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS help_keyword (   help_keyword_id  int unsigned not null, name char(64) not null, primary key (help_keyword_id), unique index (name) ) engine=MyISAM CHARACTER SET utf8 comment='help keywords';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS time_zone_name (   Name char(64) NOT NULL, Time_zone_id int unsigned NOT NULL, PRIMARY KEY Name (Name) ) engine=MyISAM CHARACTER SET utf8   comment='Time zone names';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS time_zone (   Time_zone_id int unsigned NOT NULL auto_increment, Use_leap_seconds enum('Y','N') COLLATE utf8_general_ci DEFAULT 'N' NOT NULL, PRIMARY KEY TzId (Time_zone_id) ) engine=MyISAM CHARACTER SET utf8   comment='Time zones';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS time_zone_transition (   Time_zone_id int unsigned NOT NULL, Transition_time bigint signed NOT NULL, Transition_type_id int unsigned NOT NULL, PRIMARY KEY TzIdTranTime (Time_zone_id, Transition_time) ) engine=MyISAM CHARACTER SET utf8   comment='Time zone transitions';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS time_zone_transition_type (   Time_zone_id int unsigned NOT NULL, Transition_type_id int unsigned NOT NULL, Offset int signed DEFAULT 0 NOT NULL, Is_DST tinyint unsigned DEFAULT 0 NOT NULL, Abbreviation char(8) DEFAULT '' NOT NULL, PRIMARY KEY TzIdTrTId (Time_zone_id, Transition_type_id) ) engine=MyISAM CHARACTER SET utf8   comment='Time zone transition types';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS time_zone_leap_second (   Transition_time bigint signed NOT NULL, Correction int signed NOT NULL, PRIMARY KEY TranTime (Transition_time) ) engine=MyISAM CHARACTER SET utf8   comment='Leap seconds information for time zones';
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS proc (db char(64) collate utf8_bin DEFAULT '' NOT NULL, name char(64) DEFAULT '' NOT NULL, type enum('FUNCTION','PROCEDURE') NOT NULL, specific_name char(64) DEFAULT '' NOT NULL, language enum('SQL') DEFAULT 'SQL' NOT NULL, sql_data_access enum( 'CONTAINS_SQL', 'NO_SQL', 'READS_SQL_DATA', 'MODIFIES_SQL_DATA') DEFAULT 'CONTAINS_SQL' NOT NULL, is_deterministic enum('YES','NO') DEFAULT 'NO' NOT NULL, security_type enum('INVOKER','DEFINER') DEFAULT 'DEFINER' NOT NULL, param_list blob NOT NULL, returns longblob DEFAULT '' NOT NULL, body longblob NOT NULL, definer char(77) collate utf8_bin DEFAULT '' NOT NULL, created timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', sql_mode set( 'REAL_AS_FLOAT', 'PIPES_AS_CONCAT', 'ANSI_QUOTES', 'IGNORE_SPACE', 'NOT_USED', 'ONLY_FULL_GROUP_BY', 'NO_UNSIGNED_SUBTRACTION', 'NO_DIR_IN_CREATE', 'POSTGRESQL', 'ORACLE', 'MSSQL', 'DB2', 'MAXDB', 'NO_KEY_OPTIONS', 'NO_TAB
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS procs_priv ( Host char(60) binary DEFAULT '' NOT NULL, Db char(64) binary DEFAULT '' NOT NULL, User char(80) binary DEFAULT '' NOT NULL, Routine_name char(64) COLLATE utf8_general_ci DEFAULT '' NOT NULL, Routine_type enum('FUNCTION','PROCEDURE') NOT NULL, Grantor char(77) DEFAULT '' NOT NULL, Proc_priv set('Execute','Alter Routine','Grant') COLLATE utf8_general_ci DEFAULT '' NOT NULL, Timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (Host,Db,User,Routine_name,Routine_type), KEY Grantor (Grantor) ) engine=MyISAM CHARACTER SET utf8 COLLATE utf8_bin   comment='Procedure privileges';
2020-12-13 10:14:40 156300 [Note] query: SET @have_csv = (SELECT support FROM information_schema.engines WHERE engine = 'CSV');
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF (@have_csv = 'YES', 'CREATE TABLE IF NOT EXISTS general_log (event_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, user_host MEDIUMTEXT NOT NULL, thread_id BIGINT(21) UNSIGNED NOT NULL, server_id INTEGER UNSIGNED NOT NULL, command_type VARCHAR(64) NOT NULL, argument MEDIUMTEXT NOT NULL) engine=CSV CHARACTER SET utf8 comment="General log"', 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS general_log (event_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, user_host MEDIUMTEXT NOT NULL, thread_id BIGINT(21) UNSIGNED NOT NULL, server_id INTEGER UNSIGNED NOT NULL, command_type VARCHAR(64) NOT NULL, argument MEDIUMTEXT NOT NULL) engine=CSV CHARACTER SET utf8 comment="General log"
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF (@have_csv = 'YES', 'CREATE TABLE IF NOT EXISTS slow_log (start_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, user_host MEDIUMTEXT NOT NULL, query_time TIME NOT NULL, lock_time TIME NOT NULL, rows_sent INTEGER NOT NULL, rows_examined INTEGER NOT NULL, db VARCHAR(512) NOT NULL, last_insert_id INTEGER NOT NULL, insert_id INTEGER NOT NULL, server_id INTEGER UNSIGNED NOT NULL, sql_text MEDIUMTEXT NOT NULL, thread_id BIGINT(21) UNSIGNED NOT NULL) engine=CSV CHARACTER SET utf8 comment="Slow log"', 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS slow_log (start_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, user_host MEDIUMTEXT NOT NULL, query_time TIME NOT NULL, lock_time TIME NOT NULL, rows_sent INTEGER NOT NULL, rows_examined INTEGER NOT NULL, db VARCHAR(512) NOT NULL, last_insert_id INTEGER NOT NULL, insert_id INTEGER NOT NULL, server_id INTEGER UNSIGNED NOT NULL, sql_text MEDIUMTEXT NOT NULL, thread_id BIGINT(21) UNSIGNED NOT NULL) engine=CSV CHARACTER SET utf8 comment="Slow log"
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS event ( db char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL default '', name char(64) CHARACTER SET utf8 NOT NULL default '', body longblob NOT NULL, definer char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL default '', execute_at DATETIME default NULL, interval_value int(11) default NULL, interval_field ENUM('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') default NULL, created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, modified TIMESTAMP NOT NULL DEFAULT '0000-00-00 00:00:00', last_executed DATETIME default NULL, starts DATETIME default NULL, ends DATETIME default NULL, status ENUM('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL default 'ENABLED', on_completion ENUM('DROP','PRESERVE') NOT NULL default 'DROP', sql_mode  set('REAL_AS
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS ndb_binlog_index (Position BIGINT UNSIGNED NOT NULL, File VARCHAR(255) NOT NULL, epoch BIGINT UNSIGNED NOT NULL, inserts INT UNSIGNED NOT NULL, updates INT UNSIGNED NOT NULL, deletes INT UNSIGNED NOT NULL, schemaops INT UNSIGNED NOT NULL, orig_server_id INT UNSIGNED NOT NULL, orig_epoch BIGINT UNSIGNED NOT NULL, gci INT UNSIGNED NOT NULL, PRIMARY KEY(epoch, orig_server_id, orig_epoch)) ENGINE=MYISAM;
2020-12-13 10:14:40 156300 [Note] query: SET @sql_mode_orig=@@SESSION.sql_mode;
2020-12-13 10:14:40 156300 [Note] query: SET SESSION sql_mode='NO_ENGINE_SUBSTITUTION';
2020-12-13 10:14:40 156300 [Note] query: SET @create_innodb_table_stats="CREATE TABLE IF NOT EXISTS innodb_table_stats (
	database_name			VARCHAR(64) NOT NULL,
	table_name			VARCHAR(64) NOT NULL,
	last_update			TIMESTAMP NOT NULL NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	n_rows				BIGINT UNSIGNED NOT NULL,
	clustered_index_size		BIGINT UNSIGNED NOT NULL,
	sum_of_other_index_sizes	BIGINT UNSIGNED NOT NULL,
	PRIMARY KEY (database_name, table_name)
) ENGINE=INNODB DEFAULT CHARSET=utf8 COLLATE=utf8_bin STATS_PERSISTENT=0";
2020-12-13 10:14:40 156300 [Note] query: SET @create_innodb_index_stats="CREATE TABLE IF NOT EXISTS innodb_index_stats (
	database_name			VARCHAR(64) NOT NULL,
	table_name			VARCHAR(64) NOT NULL,
	index_name			VARCHAR(64) NOT NULL,
	last_update			TIMESTAMP NOT NULL NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	/* there are at least:
	stat_name='size'
	stat_name='n_leaf_pages'
	stat_name='n_diff_pfx%' */
	stat_name			VARCHAR(64) NOT NULL,
	stat_value			BIGINT UNSIGNED NOT NULL,
	sample_size			BIGINT UNSIGNED,
	stat_description		VARCHAR(1024) NOT NULL,
	PRIMARY KEY (database_name, table_name, index_name, stat_name)
) ENGINE=INNODB DEFAULT CHARSET=utf8 COLLATE=utf8_bin STATS_PERSISTENT=0";
2020-12-13 10:14:40 156300 [Note] query: set @have_innodb= (select count(engine) from information_schema.engines where engine='INNODB' and support != 'NO');
2020-12-13 10:14:40 156300 [Note] query: set @have_rocksdb= (select count(engine) from information_schema.engines where engine='ROCKSDB' and support != 'NO');
2020-12-13 10:14:40 156300 [Note] query: SET @default_engine= IF(@default_engine='innodb' OR @default_engine='rocksdb', @default_engine, IF(@have_innodb, 'innodb', 'myisam'));
2020-12-13 10:14:40 156300 [Note] query: SET @engine_clause = CONCAT(' ENGINE= ', @default_engine, ';');
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_innodb <> 0, @create_innodb_table_stats, "SET @dummy = 0");
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_innodb <> 0, @create_innodb_index_stats, "SET @dummy = 0");
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET SESSION sql_mode=@sql_mode_orig;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE IF NOT EXISTS slave_relay_log_info (
  Number_of_lines INTEGER UNSIGNED NOT NULL COMMENT 'Number of lines in the file or rows in the table. Used to version table definitions.',
  Relay_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'The name of the current relay log file.',
  Relay_log_pos BIGINT UNSIGNED NOT NULL COMMENT 'The relay log position of the last executed event.',
  Master_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'The name of the master binary log file from which the events in the relay log file were read.',
  Master_log_pos BIGINT UNSIGNED NOT NULL COMMENT 'The master log position of the last executed event.',
  Sql_delay INTEGER NOT NULL COMMENT 'The number of seconds that the slave must lag behind the master.',
  Number_of_workers INTEGER UNSIGNED NOT NULL,
  Id INTEGER UNSIGNED NOT NULL COMMENT 'Internal Id that uniquely identifies this record.',
  PRIMARY KEY(Id)) DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT 'Relay
2020-12-13 10:14:40 156300 [Note] query: SET @str=CONCAT(@cmd, @engine_clause);
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS slave_relay_log_info (
  Number_of_lines INTEGER UNSIGNED NOT NULL COMMENT 'Number of lines in the file or rows in the table. Used to version table definitions.',
  Relay_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'The name of the current relay log file.',
  Relay_log_pos BIGINT UNSIGNED NOT NULL COMMENT 'The relay log position of the last executed event.',
  Master_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'The name of the master binary log file from which the events in the relay log file were read.',
  Master_log_pos BIGINT UNSIGNED NOT NULL COMMENT 'The master log position of the last executed event.',
  Sql_delay INTEGER NOT NULL COMMENT 'The number of seconds that the slave must lag behind the master.',
  Number_of_workers INTEGER UNSIGNED NOT NULL,
  Id INTEGER UNSIGNED NOT NULL COMMENT 'Internal Id that uniquely identifies this record.',
  PRIMARY KEY(Id)) DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT 'Relay Log Infor
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd= "CREATE TABLE IF NOT EXISTS slave_master_info (
  Number_of_lines INTEGER UNSIGNED NOT NULL COMMENT 'Number of lines in the file.',
  Master_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'The name of the master binary log currently being read from the master.',
  Master_log_pos BIGINT UNSIGNED NOT NULL COMMENT 'The master log position of the last read event.',
  Host CHAR(64) CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'The host name of the master.',
  User_name TEXT CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'The user name used to connect to the master.',
  User_password TEXT CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'The password used to connect to the master.',
  Port INTEGER UNSIGNED NOT NULL COMMENT 'The network port used to connect to the master.',
  Connect_retry INTEGER UNSIGNED NOT NULL COMMENT 'The period (in seconds) that the slave will wait before trying to reconnect to the master.',
  Enabled_ssl BOOLEAN NOT NULL COMMENT 'Indicates whether the server supp
2020-12-13 10:14:40 156300 [Note] query: SET @str=CONCAT(@cmd, @engine_clause);
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS slave_master_info (
  Number_of_lines INTEGER UNSIGNED NOT NULL COMMENT 'Number of lines in the file.',
  Master_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'The name of the master binary log currently being read from the master.',
  Master_log_pos BIGINT UNSIGNED NOT NULL COMMENT 'The master log position of the last read event.',
  Host CHAR(64) CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'The host name of the master.',
  User_name TEXT CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'The user name used to connect to the master.',
  User_password TEXT CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'The password used to connect to the master.',
  Port INTEGER UNSIGNED NOT NULL COMMENT 'The network port used to connect to the master.',
  Connect_retry INTEGER UNSIGNED NOT NULL COMMENT 'The period (in seconds) that the slave will wait before trying to reconnect to the master.',
  Enabled_ssl BOOLEAN NOT NULL COMMENT 'Indicates whether the server supports SSL co
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd= "CREATE TABLE IF NOT EXISTS slave_worker_info (
  Id INTEGER UNSIGNED NOT NULL,
  Relay_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  Relay_log_pos BIGINT UNSIGNED NOT NULL,
  Master_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  Master_log_pos BIGINT UNSIGNED NOT NULL,
  Checkpoint_relay_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  Checkpoint_relay_log_pos BIGINT UNSIGNED NOT NULL,
  Checkpoint_master_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  Checkpoint_master_log_pos BIGINT UNSIGNED NOT NULL,
  Checkpoint_seqno INT UNSIGNED NOT NULL,
  Checkpoint_group_size INTEGER UNSIGNED NOT NULL,
  Checkpoint_group_bitmap BLOB NOT NULL,
  PRIMARY KEY(Id)) DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT 'Worker Information'";
2020-12-13 10:14:40 156300 [Note] query: SET @str=CONCAT(@cmd, @engine_clause);
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS slave_worker_info (
  Id INTEGER UNSIGNED NOT NULL,
  Relay_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  Relay_log_pos BIGINT UNSIGNED NOT NULL,
  Master_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  Master_log_pos BIGINT UNSIGNED NOT NULL,
  Checkpoint_relay_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  Checkpoint_relay_log_pos BIGINT UNSIGNED NOT NULL,
  Checkpoint_master_log_name TEXT CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  Checkpoint_master_log_pos BIGINT UNSIGNED NOT NULL,
  Checkpoint_seqno INT UNSIGNED NOT NULL,
  Checkpoint_group_size INTEGER UNSIGNED NOT NULL,
  Checkpoint_group_bitmap BLOB NOT NULL,
  PRIMARY KEY(Id)) DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT 'Worker Information' ENGINE= ROCKSDB
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd= "CREATE TABLE IF NOT EXISTS slave_gtid_info (
  Id INTEGER UNSIGNED NOT NULL,
  Database_name VARCHAR(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  Last_gtid VARCHAR(56) CHARACTER SET utf8 COLLATE utf8_bin,
  PRIMARY KEY(Id)) DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT 'Gtid Information'";
2020-12-13 10:14:40 156300 [Note] query: SET @str=CONCAT(@cmd, @engine_clause);
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS slave_gtid_info (
  Id INTEGER UNSIGNED NOT NULL,
  Database_name VARCHAR(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  Last_gtid VARCHAR(56) CHARACTER SET utf8 COLLATE utf8_bin,
  PRIMARY KEY(Id)) DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT 'Gtid Information' ENGINE= ROCKSDB
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: set @have_old_pfs= (select count(*) from information_schema.schemata where schema_name='performance_schema');
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="SET @broken_tables = (select count(*) from information_schema.tables"
  " where engine != \'PERFORMANCE_SCHEMA\' and table_schema=\'performance_schema\')";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_old_pfs = 1, @cmd, 'SET @broken_tables = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @broken_tables = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="SET @broken_views = (select count(*) from information_schema.views"
  " where table_schema='performance_schema')";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_old_pfs = 1, @cmd, 'SET @broken_views = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @broken_views = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @broken_routines = (select count(*) from mysql.proc where db='performance_schema');
2020-12-13 10:14:40 156300 [Note] query: SET @broken_events = (select count(*) from mysql.event where db='performance_schema');
2020-12-13 10:14:40 156300 [Note] query: SET @broken_pfs= (select @broken_tables + @broken_views + @broken_routines + @broken_events);
2020-12-13 10:14:40 156300 [Note] query: SET @cmd= "DROP DATABASE IF EXISTS performance_schema";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@broken_pfs = 0, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: DROP DATABASE IF EXISTS performance_schema
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd= "CREATE DATABASE performance_schema character set utf8";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@broken_pfs = 0, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: CREATE DATABASE performance_schema character set utf8
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: set @have_pfs= (select count(engine) from information_schema.engines where engine='PERFORMANCE_SCHEMA' and support != 'NO');
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.cond_instances("
  "NAME VARCHAR(128) not null,"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_waits_current("
  "THREAD_ID BIGINT unsigned not null,"
  "EVENT_ID BIGINT unsigned not null,"
  "END_EVENT_ID BIGINT unsigned,"
  "EVENT_NAME VARCHAR(128) not null,"
  "SOURCE VARCHAR(64),"
  "TIMER_START BIGINT unsigned,"
  "TIMER_END BIGINT unsigned,"
  "TIMER_WAIT BIGINT unsigned,"
  "SPINS INTEGER unsigned,"
  "OBJECT_SCHEMA VARCHAR(64),"
  "OBJECT_NAME VARCHAR(512),"
  "INDEX_NAME VARCHAR(64),"
  "OBJECT_TYPE VARCHAR(64),"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned not null,"
  "NESTING_EVENT_ID BIGINT unsigned,"
  "NESTING_EVENT_TYPE ENUM('STATEMENT', 'STAGE', 'WAIT'),"
  "OPERATION VARCHAR(32) not null,"
  "NUMBER_OF_BYTES BIGINT,"
  "FLAGS INTEGER unsigned"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_waits_history("
  "THREAD_ID BIGINT unsigned not null,"
  "EVENT_ID BIGINT unsigned not null,"
  "END_EVENT_ID BIGINT unsigned,"
  "EVENT_NAME VARCHAR(128) not null,"
  "SOURCE VARCHAR(64),"
  "TIMER_START BIGINT unsigned,"
  "TIMER_END BIGINT unsigned,"
  "TIMER_WAIT BIGINT unsigned,"
  "SPINS INTEGER unsigned,"
  "OBJECT_SCHEMA VARCHAR(64),"
  "OBJECT_NAME VARCHAR(512),"
  "INDEX_NAME VARCHAR(64),"
  "OBJECT_TYPE VARCHAR(64),"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned not null,"
  "NESTING_EVENT_ID BIGINT unsigned,"
  "NESTING_EVENT_TYPE ENUM('STATEMENT', 'STAGE', 'WAIT'),"
  "OPERATION VARCHAR(32) not null,"
  "NUMBER_OF_BYTES BIGINT,"
  "FLAGS INTEGER unsigned"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_waits_history_long("
  "THREAD_ID BIGINT unsigned not null,"
  "EVENT_ID BIGINT unsigned not null,"
  "END_EVENT_ID BIGINT unsigned,"
  "EVENT_NAME VARCHAR(128) not null,"
  "SOURCE VARCHAR(64),"
  "TIMER_START BIGINT unsigned,"
  "TIMER_END BIGINT unsigned,"
  "TIMER_WAIT BIGINT unsigned,"
  "SPINS INTEGER unsigned,"
  "OBJECT_SCHEMA VARCHAR(64),"
  "OBJECT_NAME VARCHAR(512),"
  "INDEX_NAME VARCHAR(64),"
  "OBJECT_TYPE VARCHAR(64),"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned not null,"
  "NESTING_EVENT_ID BIGINT unsigned,"
  "NESTING_EVENT_TYPE ENUM('STATEMENT', 'STAGE', 'WAIT'),"
  "OPERATION VARCHAR(32) not null,"
  "NUMBER_OF_BYTES BIGINT,"
  "FLAGS INTEGER unsigned"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_waits_summary_by_instance("
  "EVENT_NAME VARCHAR(128) not null,"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_waits_summary_by_host_by_event_name("
  "HOST CHAR(60) collate utf8_bin default null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_waits_summary_by_user_by_event_name("
  "USER CHAR(80) collate utf8_bin default null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_waits_summary_by_account_by_event_name("
  "USER CHAR(80) collate utf8_bin default null,"
  "HOST CHAR(60) collate utf8_bin default null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_waits_summary_by_thread_by_event_name("
  "THREAD_ID BIGINT unsigned not null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_waits_summary_global_by_event_name("
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.file_instances("
  "FILE_NAME VARCHAR(512) not null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "OPEN_COUNT INTEGER unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.file_summary_by_event_name("
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "COUNT_READ BIGINT unsigned not null,"
  "SUM_TIMER_READ BIGINT unsigned not null,"
  "MIN_TIMER_READ BIGINT unsigned not null,"
  "AVG_TIMER_READ BIGINT unsigned not null,"
  "MAX_TIMER_READ BIGINT unsigned not null,"
  "SUM_NUMBER_OF_BYTES_READ BIGINT not null,"
  "COUNT_WRITE BIGINT unsigned not null,"
  "SUM_TIMER_WRITE BIGINT unsigned not null,"
  "MIN_TIMER_WRITE BIGINT unsigned not null,"
  "AVG_TIMER_WRITE BIGINT unsigned not null,"
  "MAX_TIMER_WRITE BIGINT unsigned not null,"
  "SUM_NUMBER_OF_BYTES_WRITE BIGINT not null,"
  "COUNT_MISC BIGINT unsigned not null,"
  "SUM_TIMER_MISC BIGINT unsigned not null,"
  "MIN_TIMER_MISC BIGINT unsigned not null,"
  "AVG_TIMER_MI
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.file_summary_by_instance("
  "FILE_NAME VARCHAR(512) not null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "COUNT_READ BIGINT unsigned not null,"
  "SUM_TIMER_READ BIGINT unsigned not null,"
  "MIN_TIMER_READ BIGINT unsigned not null,"
  "AVG_TIMER_READ BIGINT unsigned not null,"
  "MAX_TIMER_READ BIGINT unsigned not null,"
  "SUM_NUMBER_OF_BYTES_READ BIGINT not null,"
  "COUNT_WRITE BIGINT unsigned not null,"
  "SUM_TIMER_WRITE BIGINT unsigned not null,"
  "MIN_TIMER_WRITE BIGINT unsigned not null,"
  "AVG_TIMER_WRITE BIGINT unsigned not null,"
  "MAX_TIMER_WRITE BIGINT unsigned not null,"
  "SUM_NUMBER_OF_BYTES_WRITE BIGINT not null,"
  "COUNT_MISC BIGINT unsigned not null,"
  "SUM_TIMER_MISC 
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.socket_instances("
  "EVENT_NAME VARCHAR(128) not null,"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned not null,"
  "THREAD_ID BIGINT unsigned,"
  "SOCKET_ID INTEGER not null,"
  "IP VARCHAR(64) not null,"
  "PORT INTEGER not null,"
  "STATE ENUM('IDLE','ACTIVE') not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.socket_summary_by_instance("
  "EVENT_NAME VARCHAR(128) not null,"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "COUNT_READ BIGINT unsigned not null,"
  "SUM_TIMER_READ BIGINT unsigned not null,"
  "MIN_TIMER_READ BIGINT unsigned not null,"
  "AVG_TIMER_READ BIGINT unsigned not null,"
  "MAX_TIMER_READ BIGINT unsigned not null,"
  "SUM_NUMBER_OF_BYTES_READ BIGINT unsigned not null,"
  "COUNT_WRITE BIGINT unsigned not null,"
  "SUM_TIMER_WRITE BIGINT unsigned not null,"
  "MIN_TIMER_WRITE BIGINT unsigned not null,"
  "AVG_TIMER_WRITE BIGINT unsigned not null,"
  "MAX_TIMER_WRITE BIGINT unsigned not null,"
  "SUM_NUMBER_OF_BYTES_WRITE BIGINT unsigned not null,"
  "COUNT_MISC BIGINT unsigned not null,"
  "SUM_TIMER_MISC BIGINT unsigned n
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.socket_summary_by_event_name("
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "COUNT_READ BIGINT unsigned not null,"
  "SUM_TIMER_READ BIGINT unsigned not null,"
  "MIN_TIMER_READ BIGINT unsigned not null,"
  "AVG_TIMER_READ BIGINT unsigned not null,"
  "MAX_TIMER_READ BIGINT unsigned not null,"
  "SUM_NUMBER_OF_BYTES_READ BIGINT unsigned not null,"
  "COUNT_WRITE BIGINT unsigned not null,"
  "SUM_TIMER_WRITE BIGINT unsigned not null,"
  "MIN_TIMER_WRITE BIGINT unsigned not null,"
  "AVG_TIMER_WRITE BIGINT unsigned not null,"
  "MAX_TIMER_WRITE BIGINT unsigned not null,"
  "SUM_NUMBER_OF_BYTES_WRITE BIGINT unsigned not null,"
  "COUNT_MISC BIGINT unsigned not null,"
  "SUM_TIMER_MISC BIGINT unsigned not null,"
  "MIN_TIMER_MISC BIGINT unsigned not nu
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.host_cache("
  "IP VARCHAR(64) not null,"
  "HOST VARCHAR(255) collate utf8_bin,"
  "HOST_VALIDATED ENUM ('YES', 'NO') not null,"
  "SUM_CONNECT_ERRORS BIGINT not null,"
  "COUNT_HOST_BLOCKED_ERRORS BIGINT not null,"
  "COUNT_NAMEINFO_TRANSIENT_ERRORS BIGINT not null,"
  "COUNT_NAMEINFO_PERMANENT_ERRORS BIGINT not null,"
  "COUNT_FORMAT_ERRORS BIGINT not null,"
  "COUNT_ADDRINFO_TRANSIENT_ERRORS BIGINT not null,"
  "COUNT_ADDRINFO_PERMANENT_ERRORS BIGINT not null,"
  "COUNT_FCRDNS_ERRORS BIGINT not null,"
  "COUNT_HOST_ACL_ERRORS BIGINT not null,"
  "COUNT_NO_AUTH_PLUGIN_ERRORS BIGINT not null,"
  "COUNT_AUTH_PLUGIN_ERRORS BIGINT not null,"
  "COUNT_HANDSHAKE_ERRORS BIGINT not null,"
  "COUNT_PROXY_USER_ERRORS BIGINT not null,"
  "COUNT_PROXY_USER_ACL_ERRORS BIGINT not null,"
  "COUNT_AUTHENTICATION_ERRORS BIGINT not null,"
  "COUNT_SSL_ERRORS BIGINT not null,"
  "COUNT_MAX_USER_CONNECTIONS_ERRORS BIGINT not null,"
  "COUNT_MAX_USER_CONNECTIONS_PER_HOUR_ERRORS
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.mutex_instances("
  "NAME VARCHAR(128) not null,"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned not null,"
  "LOCKED_BY_THREAD_ID BIGINT unsigned"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.objects_summary_global_by_type("
  "OBJECT_TYPE VARCHAR(64),"
  "OBJECT_SCHEMA VARCHAR(64),"
  "OBJECT_NAME VARCHAR(64),"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.performance_timers("
  "TIMER_NAME ENUM ('CYCLE', 'NANOSECOND', 'MICROSECOND', 'MILLISECOND', 'TICK') not null,"
  "TIMER_FREQUENCY BIGINT,"
  "TIMER_RESOLUTION BIGINT,"
  "TIMER_OVERHEAD BIGINT"
  ") ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.rwlock_instances("
  "NAME VARCHAR(128) not null,"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned not null,"
  "WRITE_LOCKED_BY_THREAD_ID BIGINT unsigned,"
  "READ_LOCKED_BY_COUNT INTEGER unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.setup_actors("
  "HOST CHAR(60) collate utf8_bin default '%' not null,"
  "USER CHAR(80) collate utf8_bin default '%' not null,"
  "ROLE CHAR(16) collate utf8_bin default '%' not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.setup_consumers("
  "NAME VARCHAR(64) not null,"
  "ENABLED ENUM ('YES', 'NO') not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.setup_instruments("
  "NAME VARCHAR(128) not null,"
  "ENABLED ENUM ('YES', 'NO') not null,"
  "TIMED ENUM ('YES', 'NO') not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.setup_objects("
  "OBJECT_TYPE ENUM ('TABLE') not null default 'TABLE',"
  "OBJECT_SCHEMA VARCHAR(64) default '%',"
  "OBJECT_NAME VARCHAR(64) not null default '%',"
  "ENABLED ENUM ('YES', 'NO') not null default 'YES',"
  "TIMED ENUM ('YES', 'NO') not null default 'YES'"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.setup_timers("
  "NAME VARCHAR(64) not null,"
  "TIMER_NAME ENUM ('CYCLE', 'NANOSECOND', 'MICROSECOND', 'MILLISECOND', 'TICK') not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.table_io_waits_summary_by_index_usage("
  "OBJECT_TYPE VARCHAR(64),"
  "OBJECT_SCHEMA VARCHAR(64),"
  "OBJECT_NAME VARCHAR(64),"
  "INDEX_NAME VARCHAR(64),"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "COUNT_READ BIGINT unsigned not null,"
  "SUM_TIMER_READ BIGINT unsigned not null,"
  "MIN_TIMER_READ BIGINT unsigned not null,"
  "AVG_TIMER_READ BIGINT unsigned not null,"
  "MAX_TIMER_READ BIGINT unsigned not null,"
  "COUNT_WRITE BIGINT unsigned not null,"
  "SUM_TIMER_WRITE BIGINT unsigned not null,"
  "MIN_TIMER_WRITE BIGINT unsigned not null,"
  "AVG_TIMER_WRITE BIGINT unsigned not null,"
  "MAX_TIMER_WRITE BIGINT unsigned not null,"
  "COUNT_FETCH BIGINT unsigned not null,"
  "SUM_TIMER_FETCH BIGINT unsigned not null,"
  "MIN_TIMER_FETCH BIGINT unsigned not null,"
  "AVG_TIMER_FE
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.table_io_waits_summary_by_table("
  "OBJECT_TYPE VARCHAR(64),"
  "OBJECT_SCHEMA VARCHAR(64),"
  "OBJECT_NAME VARCHAR(64),"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "COUNT_READ BIGINT unsigned not null,"
  "SUM_TIMER_READ BIGINT unsigned not null,"
  "MIN_TIMER_READ BIGINT unsigned not null,"
  "AVG_TIMER_READ BIGINT unsigned not null,"
  "MAX_TIMER_READ BIGINT unsigned not null,"
  "COUNT_WRITE BIGINT unsigned not null,"
  "SUM_TIMER_WRITE BIGINT unsigned not null,"
  "MIN_TIMER_WRITE BIGINT unsigned not null,"
  "AVG_TIMER_WRITE BIGINT unsigned not null,"
  "MAX_TIMER_WRITE BIGINT unsigned not null,"
  "COUNT_FETCH BIGINT unsigned not null,"
  "SUM_TIMER_FETCH BIGINT unsigned not null,"
  "MIN_TIMER_FETCH BIGINT unsigned not null,"
  "AVG_TIMER_FETCH BIGINT unsigned not null,"
  "
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.table_lock_waits_summary_by_table("
  "OBJECT_TYPE VARCHAR(64),"
  "OBJECT_SCHEMA VARCHAR(64),"
  "OBJECT_NAME VARCHAR(64),"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "COUNT_READ BIGINT unsigned not null,"
  "SUM_TIMER_READ BIGINT unsigned not null,"
  "MIN_TIMER_READ BIGINT unsigned not null,"
  "AVG_TIMER_READ BIGINT unsigned not null,"
  "MAX_TIMER_READ BIGINT unsigned not null,"
  "COUNT_WRITE BIGINT unsigned not null,"
  "SUM_TIMER_WRITE BIGINT unsigned not null,"
  "MIN_TIMER_WRITE BIGINT unsigned not null,"
  "AVG_TIMER_WRITE BIGINT unsigned not null,"
  "MAX_TIMER_WRITE BIGINT unsigned not null,"
  "COUNT_READ_NORMAL BIGINT unsigned not null,"
  "SUM_TIMER_READ_NORMAL BIGINT unsigned not null,"
  "MIN_TIMER_READ_NORMAL BIGINT unsigned not null,"
  "AVG_TIMER_READ_NORMAL BIGI
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.threads("
  "THREAD_ID BIGINT unsigned not null,"
  "NAME VARCHAR(128) not null,"
  "TYPE VARCHAR(10) not null,"
  "PROCESSLIST_ID BIGINT unsigned,"
  "PROCESSLIST_USER VARCHAR(80),"
  "PROCESSLIST_HOST VARCHAR(60),"
  "PROCESSLIST_DB VARCHAR(64),"
  "PROCESSLIST_COMMAND VARCHAR(16),"
  "PROCESSLIST_TIME BIGINT,"
  "PROCESSLIST_STATE VARCHAR(64),"
  "PROCESSLIST_INFO LONGTEXT,"
  "PARENT_THREAD_ID BIGINT unsigned,"
  "ROLE VARCHAR(64),"
  "INSTRUMENTED ENUM ('YES', 'NO') not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_stages_current("
  "THREAD_ID BIGINT unsigned not null,"
  "EVENT_ID BIGINT unsigned not null,"
  "END_EVENT_ID BIGINT unsigned,"
  "EVENT_NAME VARCHAR(128) not null,"
  "SOURCE VARCHAR(64),"
  "TIMER_START BIGINT unsigned,"
  "TIMER_END BIGINT unsigned,"
  "TIMER_WAIT BIGINT unsigned,"
  "NESTING_EVENT_ID BIGINT unsigned,"
  "NESTING_EVENT_TYPE ENUM('STATEMENT', 'STAGE', 'WAIT')"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_stages_history("
  "THREAD_ID BIGINT unsigned not null,"
  "EVENT_ID BIGINT unsigned not null,"
  "END_EVENT_ID BIGINT unsigned,"
  "EVENT_NAME VARCHAR(128) not null,"
  "SOURCE VARCHAR(64),"
  "TIMER_START BIGINT unsigned,"
  "TIMER_END BIGINT unsigned,"
  "TIMER_WAIT BIGINT unsigned,"
  "NESTING_EVENT_ID BIGINT unsigned,"
  "NESTING_EVENT_TYPE ENUM('STATEMENT', 'STAGE', 'WAIT')"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_stages_history_long("
  "THREAD_ID BIGINT unsigned not null,"
  "EVENT_ID BIGINT unsigned not null,"
  "END_EVENT_ID BIGINT unsigned,"
  "EVENT_NAME VARCHAR(128) not null,"
  "SOURCE VARCHAR(64),"
  "TIMER_START BIGINT unsigned,"
  "TIMER_END BIGINT unsigned,"
  "TIMER_WAIT BIGINT unsigned,"
  "NESTING_EVENT_ID BIGINT unsigned,"
  "NESTING_EVENT_TYPE ENUM('STATEMENT', 'STAGE', 'WAIT')"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_stages_summary_by_thread_by_event_name("
  "THREAD_ID BIGINT unsigned not null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_stages_summary_by_host_by_event_name("
  "HOST CHAR(60) collate utf8_bin default null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_stages_summary_by_user_by_event_name("
  "USER CHAR(80) collate utf8_bin default null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_stages_summary_by_account_by_event_name("
  "USER CHAR(80) collate utf8_bin default null,"
  "HOST CHAR(60) collate utf8_bin default null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_stages_summary_global_by_event_name("
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_statements_current("
  "THREAD_ID BIGINT unsigned not null,"
  "EVENT_ID BIGINT unsigned not null,"
  "END_EVENT_ID BIGINT unsigned,"
  "EVENT_NAME VARCHAR(128) not null,"
  "SOURCE VARCHAR(64),"
  "TIMER_START BIGINT unsigned,"
  "TIMER_END BIGINT unsigned,"
  "TIMER_WAIT BIGINT unsigned,"
  "LOCK_TIME bigint unsigned not null,"
  "SQL_TEXT LONGTEXT,"
  "DIGEST VARCHAR(32),"
  "DIGEST_TEXT LONGTEXT,"
  "CURRENT_SCHEMA VARCHAR(64),"
  "OBJECT_TYPE VARCHAR(64),"
  "OBJECT_SCHEMA VARCHAR(64),"
  "OBJECT_NAME VARCHAR(64),"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned,"
  "MYSQL_ERRNO INTEGER,"
  "RETURNED_SQLSTATE VARCHAR(5),"
  "MESSAGE_TEXT VARCHAR(128),"
  "ERRORS BIGINT unsigned not null,"
  "WARNINGS BIGINT unsigned not null,"
  "ROWS_AFFECTED BIGINT unsigned not null,"
  "ROWS_SENT BIGINT unsigned not null,"
  "ROWS_EXAMINED BIGINT unsigned not null,"
  "CREATED_TMP_DISK_TABLES BIGINT unsigned not null,"
  "CREATED_TMP_TABLES BIGINT unsigned not null,"
 
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_statements_history("
  "THREAD_ID BIGINT unsigned not null,"
  "EVENT_ID BIGINT unsigned not null,"
  "END_EVENT_ID BIGINT unsigned,"
  "EVENT_NAME VARCHAR(128) not null,"
  "SOURCE VARCHAR(64),"
  "TIMER_START BIGINT unsigned,"
  "TIMER_END BIGINT unsigned,"
  "TIMER_WAIT BIGINT unsigned,"
  "LOCK_TIME bigint unsigned not null,"
  "SQL_TEXT LONGTEXT,"
  "DIGEST VARCHAR(32),"
  "DIGEST_TEXT LONGTEXT,"
  "CURRENT_SCHEMA VARCHAR(64),"
  "OBJECT_TYPE VARCHAR(64),"
  "OBJECT_SCHEMA VARCHAR(64),"
  "OBJECT_NAME VARCHAR(64),"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned,"
  "MYSQL_ERRNO INTEGER,"
  "RETURNED_SQLSTATE VARCHAR(5),"
  "MESSAGE_TEXT VARCHAR(128),"
  "ERRORS BIGINT unsigned not null,"
  "WARNINGS BIGINT unsigned not null,"
  "ROWS_AFFECTED BIGINT unsigned not null,"
  "ROWS_SENT BIGINT unsigned not null,"
  "ROWS_EXAMINED BIGINT unsigned not null,"
  "CREATED_TMP_DISK_TABLES BIGINT unsigned not null,"
  "CREATED_TMP_TABLES BIGINT unsigned not null,"
 
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_statements_history_long("
  "THREAD_ID BIGINT unsigned not null,"
  "EVENT_ID BIGINT unsigned not null,"
  "END_EVENT_ID BIGINT unsigned,"
  "EVENT_NAME VARCHAR(128) not null,"
  "SOURCE VARCHAR(64),"
  "TIMER_START BIGINT unsigned,"
  "TIMER_END BIGINT unsigned,"
  "TIMER_WAIT BIGINT unsigned,"
  "LOCK_TIME bigint unsigned not null,"
  "SQL_TEXT LONGTEXT,"
  "DIGEST VARCHAR(32),"
  "DIGEST_TEXT LONGTEXT,"
  "CURRENT_SCHEMA VARCHAR(64),"
  "OBJECT_TYPE VARCHAR(64),"
  "OBJECT_SCHEMA VARCHAR(64),"
  "OBJECT_NAME VARCHAR(64),"
  "OBJECT_INSTANCE_BEGIN BIGINT unsigned,"
  "MYSQL_ERRNO INTEGER,"
  "RETURNED_SQLSTATE VARCHAR(5),"
  "MESSAGE_TEXT VARCHAR(128),"
  "ERRORS BIGINT unsigned not null,"
  "WARNINGS BIGINT unsigned not null,"
  "ROWS_AFFECTED BIGINT unsigned not null,"
  "ROWS_SENT BIGINT unsigned not null,"
  "ROWS_EXAMINED BIGINT unsigned not null,"
  "CREATED_TMP_DISK_TABLES BIGINT unsigned not null,"
  "CREATED_TMP_TABLES BIGINT unsigned not nul
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_statements_summary_by_thread_by_event_name("
  "THREAD_ID BIGINT unsigned not null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "SUM_LOCK_TIME BIGINT unsigned not null,"
  "SUM_ERRORS BIGINT unsigned not null,"
  "SUM_WARNINGS BIGINT unsigned not null,"
  "SUM_ROWS_AFFECTED BIGINT unsigned not null,"
  "SUM_ROWS_SENT BIGINT unsigned not null,"
  "SUM_ROWS_EXAMINED BIGINT unsigned not null,"
  "SUM_CREATED_TMP_DISK_TABLES BIGINT unsigned not null,"
  "SUM_CREATED_TMP_TABLES BIGINT unsigned not null,"
  "SUM_SELECT_FULL_JOIN BIGINT unsigned not null,"
  "SUM_SELECT_FULL_RANGE_JOIN BIGINT unsigned not null,"
  "SUM_SELECT_RANGE BIGINT unsigned not null,"
  "SUM_SELECT_RANGE_CHECK BIGINT unsigned not null,"
  "SUM_SELECT_SCAN BIGINT unsigned n
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_statements_summary_by_host_by_event_name("
  "HOST CHAR(60) collate utf8_bin default null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "SUM_LOCK_TIME BIGINT unsigned not null,"
  "SUM_ERRORS BIGINT unsigned not null,"
  "SUM_WARNINGS BIGINT unsigned not null,"
  "SUM_ROWS_AFFECTED BIGINT unsigned not null,"
  "SUM_ROWS_SENT BIGINT unsigned not null,"
  "SUM_ROWS_EXAMINED BIGINT unsigned not null,"
  "SUM_CREATED_TMP_DISK_TABLES BIGINT unsigned not null,"
  "SUM_CREATED_TMP_TABLES BIGINT unsigned not null,"
  "SUM_SELECT_FULL_JOIN BIGINT unsigned not null,"
  "SUM_SELECT_FULL_RANGE_JOIN BIGINT unsigned not null,"
  "SUM_SELECT_RANGE BIGINT unsigned not null,"
  "SUM_SELECT_RANGE_CHECK BIGINT unsigned not null,"
  "SUM_SELECT_SCAN BIGINT uns
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_statements_summary_by_user_by_event_name("
  "USER CHAR(80) collate utf8_bin default null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "SUM_LOCK_TIME BIGINT unsigned not null,"
  "SUM_ERRORS BIGINT unsigned not null,"
  "SUM_WARNINGS BIGINT unsigned not null,"
  "SUM_ROWS_AFFECTED BIGINT unsigned not null,"
  "SUM_ROWS_SENT BIGINT unsigned not null,"
  "SUM_ROWS_EXAMINED BIGINT unsigned not null,"
  "SUM_CREATED_TMP_DISK_TABLES BIGINT unsigned not null,"
  "SUM_CREATED_TMP_TABLES BIGINT unsigned not null,"
  "SUM_SELECT_FULL_JOIN BIGINT unsigned not null,"
  "SUM_SELECT_FULL_RANGE_JOIN BIGINT unsigned not null,"
  "SUM_SELECT_RANGE BIGINT unsigned not null,"
  "SUM_SELECT_RANGE_CHECK BIGINT unsigned not null,"
  "SUM_SELECT_SCAN BIGINT uns
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_statements_summary_by_account_by_event_name("
  "USER CHAR(80) collate utf8_bin default null,"
  "HOST CHAR(60) collate utf8_bin default null,"
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "SUM_LOCK_TIME BIGINT unsigned not null,"
  "SUM_ERRORS BIGINT unsigned not null,"
  "SUM_WARNINGS BIGINT unsigned not null,"
  "SUM_ROWS_AFFECTED BIGINT unsigned not null,"
  "SUM_ROWS_SENT BIGINT unsigned not null,"
  "SUM_ROWS_EXAMINED BIGINT unsigned not null,"
  "SUM_CREATED_TMP_DISK_TABLES BIGINT unsigned not null,"
  "SUM_CREATED_TMP_TABLES BIGINT unsigned not null,"
  "SUM_SELECT_FULL_JOIN BIGINT unsigned not null,"
  "SUM_SELECT_FULL_RANGE_JOIN BIGINT unsigned not null,"
  "SUM_SELECT_RANGE BIGINT unsigned not null,"
  "SUM_SELECT_RANGE_CHECK BIGI
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_statements_summary_global_by_event_name("
  "EVENT_NAME VARCHAR(128) not null,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "SUM_LOCK_TIME BIGINT unsigned not null,"
  "SUM_ERRORS BIGINT unsigned not null,"
  "SUM_WARNINGS BIGINT unsigned not null,"
  "SUM_ROWS_AFFECTED BIGINT unsigned not null,"
  "SUM_ROWS_SENT BIGINT unsigned not null,"
  "SUM_ROWS_EXAMINED BIGINT unsigned not null,"
  "SUM_CREATED_TMP_DISK_TABLES BIGINT unsigned not null,"
  "SUM_CREATED_TMP_TABLES BIGINT unsigned not null,"
  "SUM_SELECT_FULL_JOIN BIGINT unsigned not null,"
  "SUM_SELECT_FULL_RANGE_JOIN BIGINT unsigned not null,"
  "SUM_SELECT_RANGE BIGINT unsigned not null,"
  "SUM_SELECT_RANGE_CHECK BIGINT unsigned not null,"
  "SUM_SELECT_SCAN BIGINT unsigned not null,"
  "SUM_SORT_MERGE_PASSES BIGINT u
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.hosts("
  "HOST CHAR(60) collate utf8_bin default null,"
  "CURRENT_CONNECTIONS bigint not null,"
  "TOTAL_CONNECTIONS bigint not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.users("
  "USER CHAR(80) collate utf8_bin default null,"
  "CURRENT_CONNECTIONS bigint not null,"
  "TOTAL_CONNECTIONS bigint not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.accounts("
  "USER CHAR(80) collate utf8_bin default null,"
  "HOST CHAR(60) collate utf8_bin default null,"
  "CURRENT_CONNECTIONS bigint not null,"
  "TOTAL_CONNECTIONS bigint not null"
  ")ENGINE=PERFORMANCE_SCHEMA;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.events_statements_summary_by_digest("
  "SCHEMA_NAME VARCHAR(64),"
  "DIGEST VARCHAR(32),"
  "DIGEST_TEXT LONGTEXT,"
  "COUNT_STAR BIGINT unsigned not null,"
  "SUM_TIMER_WAIT BIGINT unsigned not null,"
  "MIN_TIMER_WAIT BIGINT unsigned not null,"
  "AVG_TIMER_WAIT BIGINT unsigned not null,"
  "MAX_TIMER_WAIT BIGINT unsigned not null,"
  "SUM_LOCK_TIME BIGINT unsigned not null,"
  "SUM_ERRORS BIGINT unsigned not null,"
  "SUM_WARNINGS BIGINT unsigned not null,"
  "SUM_ROWS_AFFECTED BIGINT unsigned not null,"
  "SUM_ROWS_SENT BIGINT unsigned not null,"
  "SUM_ROWS_EXAMINED BIGINT unsigned not null,"
  "SUM_CREATED_TMP_DISK_TABLES BIGINT unsigned not null,"
  "SUM_CREATED_TMP_TABLES BIGINT unsigned not null,"
  "SUM_SELECT_FULL_JOIN BIGINT unsigned not null,"
  "SUM_SELECT_FULL_RANGE_JOIN BIGINT unsigned not null,"
  "SUM_SELECT_RANGE BIGINT unsigned not null,"
  "SUM_SELECT_RANGE_CHECK BIGINT unsigned not null,"
  "SUM_SELECT_SCAN BIGINT unsigned not null,"
  "
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.session_connect_attrs("
  "PROCESSLIST_ID INT NOT NULL,"
  "ATTR_NAME VARCHAR(32) NOT NULL,"
  "ATTR_VALUE VARCHAR(1024),"
  "ORDINAL_POSITION INT"
  ")ENGINE=PERFORMANCE_SCHEMA CHARACTER SET utf8 COLLATE utf8_bin;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @cmd="CREATE TABLE performance_schema.session_account_connect_attrs "
         " LIKE performance_schema.session_connect_attrs;";
2020-12-13 10:14:40 156300 [Note] query: SET @str = IF(@have_pfs = 1, @cmd, 'SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: CREATE TABLE IF NOT EXISTS proxies_priv (Host char(60) binary DEFAULT '' NOT NULL, User char(80) binary DEFAULT '' NOT NULL, Proxied_host char(60) binary DEFAULT '' NOT NULL, Proxied_user char(80) binary DEFAULT '' NOT NULL, With_grant BOOL DEFAULT 0 NOT NULL, Grantor char(77) DEFAULT '' NOT NULL, Timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY Host (Host,User,Proxied_host,Proxied_user), KEY Grantor (Grantor) ) engine=MyISAM CHARACTER SET utf8 COLLATE utf8_bin comment='User proxy privileges';
2020-12-13 10:14:40 156300 [Note] query: set @had_proxies_priv_table= @@warning_count != 0;
2020-12-13 10:14:40 156300 [Note] query: SELECT @have_ndbinfo:= COUNT(*) FROM information_schema.engines WHERE engine='NDBINFO' AND support IN ('YES', 'DEFAULT');
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'SELECT @have_ndbinfo:= (@@ndbinfo_version >= (7 << 16) | (1 << 8)) || @ndbinfo_skip_version_check','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'SET @@ndbinfo_show_hidden=TRUE','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'SELECT @have_ndbinfo:= COUNT(*) = 0 FROM information_schema.tables WHERE table_schema = @@ndbinfo_database AND LEFT(table_name, LENGTH(@@ndbinfo_table_prefix)) = @@ndbinfo_table_prefix AND engine != "ndbinfo"','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'SET @@ndbinfo_show_hidden=default','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE DATABASE IF NOT EXISTS `ndbinfo`','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'SET @@global.ndbinfo_offline=TRUE','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP VIEW IF EXISTS ndbinfo.transporters','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP VIEW IF EXISTS ndbinfo.logspaces','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP VIEW IF EXISTS ndbinfo.logbuffers','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP VIEW IF EXISTS ndbinfo.resources','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP VIEW IF EXISTS ndbinfo.counters','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP VIEW IF EXISTS ndbinfo.nodes','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP VIEW IF EXISTS ndbinfo.memoryusage','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP VIEW IF EXISTS ndbinfo.diskpagebuffer','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS ndbinfo.blocks','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS ndbinfo.config_params','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS `ndbinfo`.`ndb$tables`','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`ndb$tables` (`table_id` INT UNSIGNED,`table_name` VARCHAR(512),`comment` VARCHAR(512)) COMMENT="metadata for tables available through ndbinfo" ENGINE=NDBINFO','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS `ndbinfo`.`ndb$columns`','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`ndb$columns` (`table_id` INT UNSIGNED,`column_id` INT UNSIGNED,`column_name` VARCHAR(512),`column_type` INT UNSIGNED,`comment` VARCHAR(512)) COMMENT="metadata for columns available through ndbinfo " ENGINE=NDBINFO','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS `ndbinfo`.`ndb$test`','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`ndb$test` (`node_id` INT UNSIGNED,`block_number` INT UNSIGNED,`block_instance` INT UNSIGNED,`counter` INT UNSIGNED,`counter2` BIGINT UNSIGNED) COMMENT="for testing" ENGINE=NDBINFO','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS `ndbinfo`.`ndb$pools`','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`ndb$pools` (`node_id` INT UNSIGNED,`block_number` INT UNSIGNED,`block_instance` INT UNSIGNED,`pool_name` VARCHAR(512),`used` BIGINT UNSIGNED COMMENT "currently in use",`total` BIGINT UNSIGNED COMMENT "total allocated",`high` BIGINT UNSIGNED COMMENT "in use high water mark",`entry_size` BIGINT UNSIGNED COMMENT "size in bytes of each object",`config_param1` INT UNSIGNED COMMENT "config param 1 affecting pool",`config_param2` INT UNSIGNED COMMENT "config param 2 affecting pool",`config_param3` INT UNSIGNED COMMENT "config param 3 affecting pool",`config_param4` INT UNSIGNED COMMENT "config param 4 affecting pool") COMMENT="pool usage" ENGINE=NDBINFO','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS `ndbinfo`.`ndb$transporters`','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`ndb$transporters` (`node_id` INT UNSIGNED,`remote_node_id` INT UNSIGNED,`connection_status` INT UNSIGNED) COMMENT="transporter status" ENGINE=NDBINFO','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS `ndbinfo`.`ndb$logspaces`','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`ndb$logspaces` (`node_id` INT UNSIGNED,`log_type` INT UNSIGNED COMMENT "0 = REDO, 1 = DD-UNDO",`log_id` INT UNSIGNED,`log_part` INT UNSIGNED,`total` BIGINT UNSIGNED COMMENT "total allocated",`used` BIGINT UNSIGNED COMMENT "currently in use",`high` BIGINT UNSIGNED COMMENT "in use high water mark") COMMENT="logspace usage" ENGINE=NDBINFO','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS `ndbinfo`.`ndb$logbuffers`','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`ndb$logbuffers` (`node_id` INT UNSIGNED,`log_type` INT UNSIGNED COMMENT "0 = REDO, 1 = DD-UNDO",`log_id` INT UNSIGNED,`log_part` INT UNSIGNED,`total` BIGINT UNSIGNED COMMENT "total allocated",`used` BIGINT UNSIGNED COMMENT "currently in use",`high` BIGINT UNSIGNED COMMENT "in use high water mark") COMMENT="logbuffer usage" ENGINE=NDBINFO','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS `ndbinfo`.`ndb$resources`','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`ndb$resources` (`node_id` INT UNSIGNED,`resource_id` INT UNSIGNED,`reserved` INT UNSIGNED COMMENT "reserved for this resource",`used` INT UNSIGNED COMMENT "currently in use",`max` INT UNSIGNED COMMENT "max available",`high` INT UNSIGNED COMMENT "in use high water mark") COMMENT="resources usage (a.k.a superpool)" ENGINE=NDBINFO','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS `ndbinfo`.`ndb$counters`','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`ndb$counters` (`node_id` INT UNSIGNED,`block_number` INT UNSIGNED,`block_instance` INT UNSIGNED,`counter_id` INT UNSIGNED,`val` BIGINT UNSIGNED COMMENT "monotonically increasing since process start") COMMENT="monotonic counters" ENGINE=NDBINFO','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS `ndbinfo`.`ndb$nodes`','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`ndb$nodes` (`node_id` INT UNSIGNED,`uptime` BIGINT UNSIGNED COMMENT "time in seconds that node has been running",`status` INT UNSIGNED COMMENT "starting/started/stopped etc.",`start_phase` INT UNSIGNED COMMENT "start phase if node is starting",`config_generation` INT UNSIGNED COMMENT "configuration generation number") COMMENT="node status" ENGINE=NDBINFO','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'DROP TABLE IF EXISTS `ndbinfo`.`ndb$diskpagebuffer`','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`ndb$diskpagebuffer` (`node_id` INT UNSIGNED,`block_instance` INT UNSIGNED,`pages_written` BIGINT UNSIGNED COMMENT "Pages written to disk",`pages_written_lcp` BIGINT UNSIGNED COMMENT "Pages written by local checkpoint",`pages_read` BIGINT UNSIGNED COMMENT "Pages read from disk",`log_waits` BIGINT UNSIGNED COMMENT "Page writes waiting for log to be written to disk",`page_requests_direct_return` BIGINT UNSIGNED COMMENT "Page in buffer and no requests waiting for it",`page_requests_wait_queue` BIGINT UNSIGNED COMMENT "Page in buffer, but some requests are already waiting for it",`page_requests_wait_io` BIGINT UNSIGNED COMMENT "Page not in buffer, waiting to be read from disk") COMMENT="disk page buffer info" ENGINE=NDBINFO','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`blocks` (block_number INT UNSIGNED PRIMARY KEY, block_name VARCHAR(512))','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'INSERT INTO `ndbinfo`.`blocks` VALUES (254, "CMVMI"), (248, "DBACC"), (250, "DBDICT"), (246, "DBDIH"), (247, "DBLQH"), (245, "DBTC"), (249, "DBTUP"), (253, "NDBFS"), (251, "NDBCNTR"), (252, "QMGR"), (255, "TRIX"), (244, "BACKUP"), (256, "DBUTIL"), (257, "SUMA"), (258, "DBTUX"), (259, "TSMAN"), (260, "LGMAN"), (261, "PGMAN"), (262, "RESTORE"), (263, "DBINFO"), (264, "DBSPJ")','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE TABLE `ndbinfo`.`config_params` (param_number INT UNSIGNED PRIMARY KEY, param_name VARCHAR(512))','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'INSERT INTO `ndbinfo`.`config_params` VALUES (179, "MaxNoOfSubscriptions"), (180, "MaxNoOfSubscribers"), (181, "MaxNoOfConcurrentSubOperations"), (5, "HostName"), (3, "NodeId"), (101, "NoOfReplicas"), (103, "MaxNoOfAttributes"), (102, "MaxNoOfTables"), (149, "MaxNoOfOrderedIndexes"), (150, "MaxNoOfUniqueHashIndexes"), (110, "MaxNoOfConcurrentIndexOperations"), (105, "MaxNoOfTriggers"), (109, "MaxNoOfFiredTriggers"), (100, "MaxNoOfSavedMessages"), (177, "LockExecuteThreadToCPU"), (178, "LockMaintThreadsToCPU"), (176, "RealtimeScheduler"), (114, "LockPagesInMainMemory"), (123, "TimeBetweenWatchDogCheck"), (174, "SchedulerExecutionTimer"), (175, "SchedulerSpinTimer"), (141, "TimeBetweenWatchDogCheckInitial"), (124, "StopOnError"), (107, "MaxNoOfConcurrentOperations"), (151, "MaxNoOfLocalOperations"), (152, "MaxNoOfLocalScans"), (153, "BatchSizePerLocalScan"), (106, "MaxNoOfConcurrentTransactions"), (108, "MaxNoOfConcurrentScans"), (111, "TransactionBufferMemory"), (113, "IndexM
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE OR REPLACE DEFINER=`root@localhost` SQL SECURITY INVOKER VIEW `ndbinfo`.`transporters` AS SELECT node_id, remote_node_id,  CASE connection_status  WHEN 0 THEN "CONNECTED"  WHEN 1 THEN "CONNECTING"  WHEN 2 THEN "DISCONNECTED"  WHEN 3 THEN "DISCONNECTING"  ELSE NULL  END AS status FROM ndbinfo.ndb$transporters','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE OR REPLACE DEFINER=`root@localhost` SQL SECURITY INVOKER VIEW `ndbinfo`.`logspaces` AS SELECT node_id,  CASE log_type  WHEN 0 THEN "REDO"  WHEN 1 THEN "DD-UNDO"  ELSE NULL  END AS log_type, log_id, log_part, total, used FROM ndbinfo.ndb$logspaces','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE OR REPLACE DEFINER=`root@localhost` SQL SECURITY INVOKER VIEW `ndbinfo`.`logbuffers` AS SELECT node_id,  CASE log_type  WHEN 0 THEN "REDO"  WHEN 1 THEN "DD-UNDO"  ELSE "<unknown>"  END AS log_type, log_id, log_part, total, used FROM ndbinfo.ndb$logbuffers','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE OR REPLACE DEFINER=`root@localhost` SQL SECURITY INVOKER VIEW `ndbinfo`.`resources` AS SELECT node_id,  CASE resource_id  WHEN 0 THEN "RESERVED"  WHEN 1 THEN "DISK_OPERATIONS"  WHEN 2 THEN "DISK_RECORDS"  WHEN 3 THEN "DATA_MEMORY"  WHEN 4 THEN "JOBBUFFER"  WHEN 5 THEN "FILE_BUFFERS"  WHEN 6 THEN "TRANSPORTER_BUFFERS"  ELSE "<unknown>"  END AS resource_name, reserved, used, max FROM ndbinfo.ndb$resources','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE OR REPLACE DEFINER=`root@localhost` SQL SECURITY INVOKER VIEW `ndbinfo`.`counters` AS SELECT node_id, b.block_name, block_instance, counter_id, CASE counter_id  WHEN 1 THEN "ATTRINFO"  WHEN 2 THEN "TRANSACTIONS"  WHEN 3 THEN "COMMITS"  WHEN 4 THEN "READS"  WHEN 5 THEN "SIMPLE_READS"  WHEN 6 THEN "WRITES"  WHEN 7 THEN "ABORTS"  WHEN 8 THEN "TABLE_SCANS"  WHEN 9 THEN "RANGE_SCANS"  WHEN 10 THEN "OPERATIONS"  WHEN 11 THEN "READS_RECEIVED"  WHEN 12 THEN "LOCAL_READS_SENT"  WHEN 13 THEN "REMOTE_READS_SENT"  WHEN 14 THEN "READS_NOT_FOUND"  WHEN 15 THEN "TABLE_SCANS_RECEIVED"  WHEN 16 THEN "LOCAL_TABLE_SCANS_SENT"  WHEN 17 THEN "RANGE_SCANS_RECEIVED"  WHEN 18 THEN "LOCAL_RANGE_SCANS_SENT"  WHEN 19 THEN "REMOTE_RANGE_SCANS_SENT"  WHEN 20 THEN "SCAN_BATCHES_RETURNED"  WHEN 21 THEN "SCAN_ROWS_RETURNED"  WHEN 22 THEN "PRUNED_RANGE_SCANS_RECEIVED"  WHEN 23 THEN "CONST_PRUNED_RANGE_SCANS_RECEIVED"  ELSE "<unknown>"  END AS counter_name, val FROM ndbinfo.ndb$counters c, ndbinfo.blo
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE OR REPLACE DEFINER=`root@localhost` SQL SECURITY INVOKER VIEW `ndbinfo`.`nodes` AS SELECT node_id, uptime, CASE status  WHEN 0 THEN "NOTHING"  WHEN 1 THEN "CMVMI"  WHEN 2 THEN "STARTING"  WHEN 3 THEN "STARTED"  WHEN 4 THEN "SINGLEUSER"  WHEN 5 THEN "STOPPING_1"  WHEN 6 THEN "STOPPING_2"  WHEN 7 THEN "STOPPING_3"  WHEN 8 THEN "STOPPING_4"  ELSE "<unknown>"  END AS status, start_phase, config_generation FROM ndbinfo.ndb$nodes','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE OR REPLACE DEFINER=`root@localhost` SQL SECURITY INVOKER VIEW `ndbinfo`.`memoryusage` AS SELECT node_id,  pool_name AS memory_type,  SUM(used*entry_size) AS used,  SUM(used) AS used_pages,  SUM(total*entry_size) AS total,  SUM(total) AS total_pages FROM ndbinfo.ndb$pools WHERE block_number IN (248, 254) AND   (pool_name = "Index memory" OR pool_name = "Data memory") GROUP BY node_id, memory_type','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'CREATE OR REPLACE SQL SECURITY INVOKER VIEW `ndbinfo`.`diskpagebuffer` AS SELECT node_id, block_instance, pages_written, pages_written_lcp, pages_read, log_waits, page_requests_direct_return, page_requests_wait_queue, page_requests_wait_io FROM ndbinfo.ndb$diskpagebuffer','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SET @str=IF(@have_ndbinfo,'SET @@global.ndbinfo_offline=FALSE','SET @dummy = 0');
2020-12-13 10:14:40 156300 [Note] query: PREPARE stmt FROM @str;
2020-12-13 10:14:40 156300 [Note] query: SET @dummy = 0
2020-12-13 10:14:40 156300 [Note] query: DROP PREPARE stmt;
2020-12-13 10:14:40 156300 [Note] query: SELECT LOWER( REPLACE((SELECT REPLACE(@@hostname,'_','\_')),'%','\%') )INTO @current_hostname;
2020-12-13 10:14:40 156300 [Note] query: CREATE TEMPORARY TABLE tmp_db LIKE db;
2020-12-13 10:14:40 156300 [Note] query: INSERT INTO tmp_db VALUES ('%','test','','Y','Y','Y','Y','Y','Y','N','Y','Y','Y','Y','Y','Y','Y','Y','N','N','Y','Y');
2020-12-13 10:14:40 156300 [Note] query: INSERT INTO tmp_db VALUES ('%','test\_%','','Y','Y','Y','Y','Y','Y','N','Y','Y','Y','Y','Y','Y','Y','Y','N','N','Y','Y');
2020-12-13 10:14:40 156300 [Note] query: INSERT INTO db SELECT * FROM tmp_db WHERE @had_db_table=0;
2020-12-13 10:14:40 156300 [Note] query: DROP TABLE tmp_db;
2020-12-13 10:14:40 156300 [Note] query: CREATE TEMPORARY TABLE tmp_user LIKE user;
2020-12-13 10:14:40 156300 [Note] query: INSERT INTO tmp_user VALUES ('localhost','root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'mysql_native_password','','N');
2020-12-13 10:14:40 156300 [Note] query: REPLACE INTO tmp_user SELECT @current_hostname,'root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'mysql_native_password','','N' FROM dual WHERE @current_hostname != 'localhost';
2020-12-13 10:14:40 156300 [Note] query: REPLACE INTO tmp_user VALUES ('127.0.0.1','root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'mysql_native_password','','N');
2020-12-13 10:14:40 156300 [Note] query: REPLACE INTO tmp_user VALUES ('::1','root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'mysql_native_password','','N');
2020-12-13 10:14:40 156300 [Note] query: INSERT INTO tmp_user (host,user) VALUES ('localhost','');
2020-12-13 10:14:40 156300 [Note] query: INSERT INTO tmp_user (host,user) SELECT @current_hostname,'' FROM dual WHERE @current_hostname != 'localhost';
2020-12-13 10:14:40 156300 [Note] query: INSERT INTO user SELECT * FROM tmp_user WHERE @had_user_table=0;
2020-12-13 10:14:40 156300 [Note] query: DROP TABLE tmp_user;
2020-12-13 10:14:40 156300 [Note] query: CREATE TEMPORARY TABLE tmp_proxies_priv LIKE proxies_priv;
2020-12-13 10:14:40 156300 [Note] query: INSERT INTO tmp_proxies_priv VALUES ('localhost', 'root', '', '', TRUE, '', now());
2020-12-13 10:14:40 156300 [Note] query: REPLACE INTO tmp_proxies_priv SELECT @current_hostname, 'root', '', '', TRUE, '', now() FROM DUAL WHERE LOWER (@current_hostname) != 'localhost';
2020-12-13 10:14:40 156300 [Note] query: INSERT INTO  proxies_priv SELECT * FROM tmp_proxies_priv WHERE @had_proxies_priv_table=0;
2020-12-13 10:14:40 156300 [Note] query: DROP TABLE tmp_proxies_priv;
2020-12-13 10:14:40 156300 [Note] Binlog end
2020-12-13 10:14:40 156300 [Note] unregister_replicator OK
OK

Filling help tables...[Note] Global variable initial value (from config file) @@default-tmp-storage-engine = 'MyISAM'
[Note] Global variable initial value (from config file) @@query_cache_size = 0
[Note] Global variable initial value (from config file) @@long_query_time = 5.000000
[Note] Global variable initial value (from config file) @@log-bin = '/data/m/fbmy/binlogs/bl'
[Note] Global variable initial value (from config file) @@max_binlog_size = 134217728
[Note] Global variable initial value (from config file) @@server_id = 77
[Note] Global variable initial value (from config file) @@datadir = '/data/m/fbmy/data'
[Note] Global variable initial value (from config file) @@default-storage-engine = 'rocksdb'
[Note] Global variable initial value (from config file) @@binlog_format = 'ROW'
[Note] Global variable initial value (from config file) @@collation-server = 'latin1_bin'
[Note] Global variable initial value (from config file) @@transaction-isolation = 'READ-COMMITTED'
[Note] Global variable initial value (from cmd line) @@basedir = '.'
[Note] Global variable initial value (from cmd line) @@log_warnings = 0
[Note] Global variable initial value (from cmd line) @@max_allowed_packet = 8388608
2020-12-13 10:14:40 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).
2020-12-13 10:14:40 0 [Note] Ignoring --secure-file-priv value as server is running with --bootstrap.
2020-12-13 10:14:40 0 [Note] Setting num_sharded_locks=1 as sharding is OFF
2020-12-13 10:14:40 0 [Note] ./bin/mysqld (mysqld 5.6.35-log) starting as process 156329 ...
2020-12-13 10:14:40 156329 [Note] Flashcache bypass: disabled
2020-12-13 10:14:40 156329 [Note] Flashcache setup error is : open flash device failed

2020-12-13 10:14:40 156329 [Warning] The option innodb (skip-innodb) is deprecated and will be removed in a future release
2020-12-13 10:14:40 156329 [Note] RocksDB: 2 column families found
2020-12-13 10:14:40 156329 [Note] RocksDB: Column Families at start:
2020-12-13 10:14:40 156329 [Note]   cf=default
2020-12-13 10:14:40 156329 [Note]     write_buffer_size=33554432
2020-12-13 10:14:40 156329 [Note]     target_file_size_base=33554432
2020-12-13 10:14:40 156329 [Note]   cf=__system__
2020-12-13 10:14:40 156329 [Note]     write_buffer_size=33554432
2020-12-13 10:14:40 156329 [Note]     target_file_size_base=33554432
2020-12-13 10:14:40 156329 [Note] RocksDB: Opening TransactionDB...
2020-12-13 10:14:40 156329 [Note] RocksDB: Initializing data dictionary...
2020-12-13 10:14:40 156329 [Note] RocksDB: Initializing binlog manager...
2020-12-13 10:14:40 156329 [Note] RocksDB: Initializing DDL Manager...
2020-12-13 10:14:40 156329 [Note] RocksDB: Table_store: loaded DDL data for 4 tables
2020-12-13 10:14:40 156329 [Note] RocksDB: global statistics using get_sched_indexer_t indexer
2020-12-13 10:14:40 156329 [Note] MyRocks storage engine plugin has been successfully initialized.
2020-12-13 10:14:40 156329 [Note] MyRocks: rdb execution report (microsec): 
{
  "Rdb_ddl_manager::init" : 408
  "Rdb_binlog_manager::init" : 0
  "Rdb_dict_manager::init" : 10159
}
2020-12-13 10:14:40 156329 [Note] Starting crash recovery...
2020-12-13 10:14:40 156329 [Note] Crash recovery finished.
2020-12-13 10:14:40 156329 [Note] [rpl_wait_for_semi_sync_ack] Last ACKed pos initialized to: :4294967295
2020-12-13 10:14:40 156329 [Note] RSA private key file not found: /data/m/fbmy/data//private_key.pem. Some authentication plugins will not work.
2020-12-13 10:14:40 156329 [Note] RSA public key file not found: /data/m/fbmy/data//public_key.pem. Some authentication plugins will not work.
2020-12-13 10:14:40 156329 [Note] query: use mysql;
2020-12-13 10:14:40 156329 [Note] Binlog end
2020-12-13 10:14:40 156329 [Note] unregister_replicator OK
OK

To start mysqld at boot time you have to copy
support-files/mysql.server to the right place for your system

PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
To do so, start the server, then issue the following commands:

  ./bin/mysqladmin -u root password 'new-password'
  ./bin/mysqladmin -u root -h nuc82 password 'new-password'

Alternatively you can run:

  ./bin/mysql_secure_installation

which will also give you the option of removing the test
databases and anonymous user created by default.  This is
strongly recommended for production servers.

See the manual for more instructions.

You can start the MySQL daemon with:

  cd . ; ./bin/mysqld_safe &

You can test the MySQL daemon with mysql-test-run.pl

  cd mysql-test ; perl mysql-test-run.pl

Please report any problems at http://bugs.mysql.com/

The latest information about MySQL is available on the web at

  http://www.mysql.com

Support MySQL by buying support/licenses at http://shop.mysql.com

New default config file was created as ./my.cnf and
will be used by default by the server when you start it.
You may edit this file to change server settings

WARNING: Default config file /etc/mysql/my.cnf exists on the system
This file will be read by default by the MySQL server
If you do not want to use this, either remove it, or use the
--defaults-file argument to mysqld_safe when starting the server

